0529 day15 (it's friday!!!!!!!!!!!!!!)

>>>>>>>>>>>>오전수업
취업한 뒤에 부족한 부분 공부하면 된다
지금은 원리 깊게 파고드는 것보다 모델 짜고 경험하면서 배우자


오늘 저녁 : 한방대가삼계탕
동생이랑 몸보신 하기로 했다
먹고 힘내서 주말에 열공, 열코 해야지

지금 막연한 부분...??
acc, loss 어느 정도 나온 게 잘 나온 건지, 적당한 건지..
잘 나온 경우를 지나친 경우도 있다...
early_stopping을 썼지만 가장 최적의 점은 아님
가장 좋은 곳은 이미 지나간 부분이었음
성능 판단이 어려운 부분이 있었다

그것에 대한 문제점을 찾고 이번 시간엔 소스 추가를 할 것이다

우리가 model. fit하면 반환값이 있었다
loss와 acc(metrics에 있는 값)!

과제나 공부 시간에는 한땀한땀 직접 코드를 써 보자
수업 시간에는 시간 관계상 복붙

keras67_mnist_hist 파일 생성
hist!

>>>>>그래픽카드

1060
1070
1080
1080ti 얘네 다 단종
--------------------
       메모리
1650 3G
1660 6G cuda 코어 x
--------------------





지옥에서 온 git 

git = version control system

we are already managing vesions
우리는 이미 버전 관리를 하고 있었다
파일이 옛날 상태로 돌아가는 일도 있고, 옛날 상태대로 보관해야 할 일도 있음

version control system?? 무엇인가
여러 가지의 역할과 의미를 가지고 있다
한 번에 이해하기 힘들다
여러 가지 다면성 중 한 꼭지만 기억하면 좋겠다...
파일의 이름을 여러가지로 바꿔왔다면(그 방식으로 버전관리를 해 왔음), 
파일의 이름을 더럽히지 않는 버전관리를 할 수 있다
파일의 변경사항을 컴퓨터가 관리하게 한다
이 뿐만 아니라 다음의 세 가지 기능도 있다
backup
recovery
collaboration 

version control systems 에는 여러 가지 구체적인 제품들이 존재
CVS, SVN, GIT 이러한 것들이 유명
CVS 예전에 유행
SVN CVS 바통 받음
오늘날 가장 많은 사람들이 사용하고 개발자라면 언젠가는 꼭 배워야 할 
버전 컨트롤 시스템이 깃이다

본질, 혁신
본질부터 살펴보자
보편적이고 쉬윈까
혁신적인 요소는 아주 편리하지만 어렵다
어떤 경우에는 필요 없는 경우도 많다

git is incredibly complex!!!!!!
깃 처음 사용자들의 고충..

깃에 앞서서
dropbox, google drive 일단 소스 코드 백업, 변경사항들을 관리, 다른 사람들과 파일을 공유할 줄 알아야 한다

why is it difficult to use GIT 






















