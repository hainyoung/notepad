0525  day 11

* 오전수업
************************************review
하나하나 다읽고 가면 아무것도 못함,,,,,,,,,
모르는 건 과감히 패스
단락 문단 걍 넘겨

깃허브 6개월만이라도 잔디밭 관리 잘하기

dnn 회귀모델
회귀모델에선 acc 지표가 맞지 않다
그래서  mse, r2  를 회귀모델 지표로 사용했다

훈련한 것으로 평가하니까 효과 없음
train test split  사용
그래도 부족 -> 머신 자체에서 검증까지  val set으로 분리도해줬음
직접 분리하지 않고  model fit에서 validation split 사용
split할 때  shuffle까지 사용

한가지 데이터만 넣지 않음
두가지세가지...컬럼 여러 개 데이터도 모델 구성해봄
 input_dim 2 이상
input shape란 것도 더불어 배웠음
스칼라, 벡터, 행렬, 텐서
스칼라 그냥 상수 숫자 하나하나
벡터는 스칼라가 모인 것 1차원
행렬 2차원

1차원 텐서 벡터
2차원 텐서 행렬
3차원 이상 그냥 텐서

verbose
0은 아예 안 나오고
1은 다 나오고
2, 3 은 조금씩 다르게 나옴

함수형 모델 가장 문법적인 부분
처음에 레이어 Input으로 정하고
위에 레이어 이름이 밑에 레이어 꽁다리에 써줘야함
인풋, 아웃풋을 마지막에 명시해준다
모델은 keras.models MDEL에 있음

텐서플로우 2.0에는 어디에 있을까?
from tf.keras.models import MODEL 요렇게 불러줌

함수형 모델의 장점은 여기저기 잘랐다 붙였다 할 수 있음
시퀀셜은 불가능( 잘 잘라서 할 수도 있지만 난해해짐 에러 많이 뜸)
그래서 함수형 모델은 재사용이 잘 된다
mlp에서는 컬럼 두개 세개에서
인풋 디멘션을 컬럼에 맞춰서 해줌

모델과 모델이 결합 : 앙상블
앙상블에 들어가는 모델 : 함수형 썼었음

얼리스탑핑 쓴 거 벌써 최적화에선 좀 떨어진 상태
fit callbacks에서 early stopping 
앞으로 callbacks에 들어가는 게 많아질 것
얼리스타핑 했을 때 []에 적어줬음 -> 친구들이 많다는 뜻

dnn 에서 summary parameter, node  등등 연산 이해하고 있음
lstm 총 parameter  갯수에 대해서 모두 파악했음
lstm 구현 원리(파라미터가 얼마나 늘어나는지 체험해봤다)

lstm 친구들 simpleRNN, GRU
GRU는 게이트 하나만 없어진 것, 속도 3/4 빨라짐 lstm보다
작은 모델일 경우 lstm과  GRU는 거의 차이가 없다

lstm shape 확 늘어난 것을 느낌
dnn 때는 x의 data는 2차원이었음
input shape는 그냥 1차원
input_shape(3, ) 이런 식으로
input_dim = 3 이랑 같은 의미, column이 3개란 뜻 (data 종류 3개)

lstm 하니까 차원이 하나 더 늘어남
x = (행,          열,          몇 개씩자르는지)
     (batch_size, timesteps, feature)
input_lenghts time steps
feature dim

게이트갯수
4 * (dim + bias + output) * output

minmax :  정규화 ( 0~1)
- 최대 1, 최소 0
>>>>>>>>>>  x - x_min / x_max - x_min
 x가 데이터 요소 중 최댓값이면 1
 x가 데이터 요소 중 최솟값이면 0

standardscaler :  표준화 (standard니까 표준!) (표준편차, 평균) 이용
- 평균을 제거하고 데이터를 단위 분산으로 조정한다! 공식 다시 보자(집에 필기부분)
한쪽으로 치우친 걸 중간으로 잡아준다....
민맥스보다 더 잘 나와야하는데..
치우쳤다 싶어서 표준화 했는데 해 본 결과 안 맞는 경우도 있다
가운데로 모으려면?
가운데인 평균을 빼버리면 중간에 0이 됨

>>>>>>>>>> x - 평균 / 표준편차

 

kereas39_split  
10개의 데이터 6개씩 자르면?
6 : column (= size)
1 2 3 4 5 6 7 8 9 10

1 2 3 4 5 6
2 3 4 5 6 7
3 4 5 6 7 8
4 5 6 7 8 9
5 6 7 8 9 10
>>>>>>>>>5 x 6 형태

dataset  갯수 -  size + 1 행
size = 열

lstm  엮으려면
return_sequences = True!
차원 동일하게 유지해준다!

lstm 은
d = 3

lstm(10, shape= (3, 1) -> None, 3, 1

의 아웃풋은              -> None, 10

리턴 시퀀스 트루해주면 아웃풋 -> none, 3, 10

dense
lstm  

기본적으로 속도 차이 엄청 남....
dense input_dim = 1일 땐 1 + 1 = 2 처음  input
lstm 에서는 4 * (1 + 1 + 10) = 48 처음 input

dense
simple rnn
gru
lstm 
모두 성능 비교할 수 있다
지금 시간 부족하므로
lstm을 rnn model 퉁쳐서 dense랑 비교해본 것!

같은 모델 구성, 함수형 시퀀셜 성능의 차이 있을까?
레이어 노드 같으므로
함수형이든 시퀀셜이든 파라미터는 같음
즉 성능은 같다고 보면 된다
본인이 원하는 것 쓰면 됨

***************오후수업
만든 모델들 아까비~ 재활용 하자!
시간, 자원 절약!
모델에 다시 넣어야하는 건 데이터, 파라미터 튜닝 부분만 바꿔주면 그 모델 계속 사용 가능
모델의 save를 해보자, 그리고 불러와보자!

이제껏 지표들 움직임을 마음의 눈으로 봤음 ㅋㅋ
데이터 시각화의 일부분인 matplotlib를 해보자(데이터과학책에서 본것!)
훨씬 더 깔끔한 tensorboad로 matplotlib보다 더 훨씬 깔끔하게 웹상에서도 볼 수있다!
텐서보드는 어디에 ?
callbacks [ ](list)로 구성, 콜백 친구들 있을 것 같음..텐서보드 있을 것 같음..........ㅋㅋ
model.fit의 history를 볼 수 있다!(matplotlib으로)


모델 저장 말고 이름 설정등등 다양한 기능들은 알아서 공부하는 걸로

모델 저장, 불러오기!
간단한 문장들 적어주면 된다
경로맞춰주기! 파일명! 확장자명!

 load_model을 keras.models에서 불러온다
 input부터 끝까지 저장된 것을 불러온다


matplotlib 그래프 그려주는 것
plt라 줄여 쓰겠다
plot : x값과 y값을 씀

Dense 모델로 텐서보드 그래프 살펴보기!!!!!!!!!!!!!!!!!!!!!!!!

내일 예정
분류모델 또는 CNN 또는 LSTM 다항으로 들어가는 모델






























